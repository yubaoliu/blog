#+STARTUP: showall
#+STARTUP: hidestars
#+LAYOUT: post
#+AUTHOR: Yubao Liu
#+CATEGORIES: default
#+TITLE: TURTLE BOT
#+DESCRIPTION: post
#+TAGS: turtle bot, robot
#+TOC: nil
#+OPTIONS: H:2 num:t tags:t toc:nil timestamps:nil email:t date:t body-only:t
#+DATE: 2019-09-04 水 10:22:33
#+EXPORT_FILE_NAME: 2019-09-04-turtlebot.html
#+TOC: headlines 3
#+TOC: listings
#+TOC: tables

* Turorial
+ ROS =turtlebot_follower= ：让机器人跟随我们移动, https://blog.csdn.net/yiranhaiziqi/article/details/53085096
+ [[https://www.ncnynl.com/archives/201609/793.html][Turtlebot入门教程]]
+ [[http://wiki.ros.org/turtlebot/Tutorials/indigo/Network%20Configuration][turtlebotTutorialsindigoNetwork Configuration]]
+ [[http://wiki.ros.org/ROS/NetworkSetup][ROSNetworkSetup]]
+ [[https://medium.com/@PankajB96/pocketsphinx-in-ros-demo-1-0-74b2dfc5ebca][Pocketsphinx in ROS: Demo 1.0]]
* Install Turtlebot ROS Packages
#+begin_src sh
sudo apt install ros-kinetic-turtlebot-*
#+end_src
* Network Configuration
Config Turtlebot robot as the master machine.
My PC as the slave machine.
*** Install ssh
#+begin_src sh
sudo apt-get install openssh-server
ps -e|grep ssh

ssh [user_name]@[ROBOT_IP]
#+end_src

*** Network Time Protocol
#+begin_src sh
sudo apt-get install chrony
sudo ntpdate ntp.ubuntu.com

ntpdate -q other_computer_ip
#+end_src

*** Add host name
#+begin_src sh
 sudo vim /etc/hosts
#+end_src
Add:

#+begin_example
133.15.23.26    yubao-pc
133.15.23.206   kobuki
#+end_example

Restart Network
#+begin_src sh
sudo /etc/init.d/networking restart
#+end_src

*** Modify bash file to config ROS
Kobuki:
#+begin_src sh
echo export ROS_MASTER_URI=http://IP_OF_TURTLEBOT:11311 >> ~/turtlebot/devel/setup.sh
echo export ROS_HOSTNAME=IP_OF_TURTLEBOT >> ~/turtlebot/devel/setup.sh
#+end_src

Remote PC Setup:
#+begin_src sh
echo export ROS_MASTER_URI=http://IP_OF_TURTLEBOT:11311 >> ~/.bashrc
echo export ROS_HOSTNAME=IP_OF_PC >> ~/.bashrc
#+end_src

or add these lines to ~/.bashrc

#+begin_src sh
export ROS_MASTER_URI=http://[kobuki-ip]:11311
export ROS_HOSTNAME=<PC_IP>
export ROS_IP=<PC_IP>
#+end_src
Example:
#+begin_example
export ROS_MASTER_URI=http://kobuki:11311
export ROS_HOSTNAME=133.15.23.26
export ROS_IP=133.15.23.26
#+end_example

* Verify from TurtleBot to Remote PC
*** Hello Message
On remote pc run:
#+begin_src sh
rostopic pub -r10 /hello std_msgs/String "hello"
#+end_src

On TurtleBot run

#+begin_src sh
rostopic echo /hello
#+end_src

*** Turtlesim Example
koboki:
#+begin_src sh
roscore

rosrun turtlesim turtlesim_node
#+end_src

PC:
#+begin_src sh
rosrun turtlesim turtle_teleop_key
#+end_src

#+begin_src sh
yubao@yubao-Z370M-S01:~$ rosrun turtlesim turtle_teleop_key
Reading from keyboard
---------------------------
Use arrow keys to move the turtle.
#+end_src

* Start Turtlebot

kobuki:
#+begin_example sh
roslaunch turtlebot_bringup minimal.launch --screen
#+end_example

Remote:
#+begin_src sh
roslaunch turtlebot_teleop keyboard_teleop.launch

rosrun turtlesim draw_square
#+end_src

检查底座信息
#+begin_src sh
rqt -s kobuki_dashboard
#+end_src

* Keyboard
#+begin_example
roslaunch turtlebot_teleop keyboard_teleop.launch
#+end_example
* Joy Stick
#+begin_example
jstest /dev/input/js0

roslaunch turtlebot_teleop logitech.launch
#+end_example
* Mapping using gmapping and Kinect
**turtlebot**

#+begin_src sh
roslaunch turtlebot_bringup minimal.launch
roslaunch turtlebot_navigation gmapping_demo.launch
#+end_src
**Remote**
#+begin_src sh
roslaunch turtlebot_rviz_launchers view_navigation.launch
roslaunch turtlebot_teleop keyboard_teleop.launch
#+end_src

**Save Map**

#+begin_src sh
rosrun map_server map_saver -f /tmp/my_map
ls /tmp/
#+end_src

**Demo**

#+begin_export html
<iframe width="640" height="480" src="https://www.youtube.com/embed/QYpm-t-76T8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
#+end_export

* Autonomous Driving
**turtlebot**:
#+begin_src sh
roslaunch turtlebot_bringup minimal.launch
roslaunch turtlebot_navigation amcl_demo.launch map_file:=/tmp/my_map.yaml
#+end_src

**Remote**
#+begin_src sh
roslaunch turtlebot_rviz_launchers view_navigation.launch --screen
#+end_src
* Turtlebot充电桩：自主充电
**turtlebot**:
#+begin_src sh
roslaunch turtlebot_bringup minimal.launch
#+end_src

**Removte**
#+begin_src sh
roslaunch kobuki_auto_docking minimal.launch --screen
roslaunch kobuki_auto_docking activate.launch --screen
#+end_src

* ROS =turtlebot_follower=
**Turtlebot**
#+begin_example
roslaunch turtlebot_bringup minimal.launch
#+end_example

**PC**
#+begin_example
roslaunch turtlebot_follower follower.launch
#+end_example

**Config Parameters**
#+begin_example
rosrun rqt_reconfigure rqt_reconfigure
#+end_example

**Rviz Setting**
- Frame: =camera_rgb_frame=
- Add marker topics

Demo:

#+begin_export html
<iframe width="677" height="412" src="https://www.youtube.com/embed/UjGAd0mEZ1M" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
#+end_export

* pocketsphinx: ksm (keyword spotting mode)

Refer:
- https://github.com/Pankaj-Baranwal/pocketsphinx/wiki/Demo:-Kws-mode
- [[https://medium.com/@PankajB96/pocketsphinx-in-ros-demo-1-0-74b2dfc5ebca][Pocketsphinx in ROS: Demo 1.0]]

- build pocketsphinx ros wrapper
#+begin_example
cd ~/catkin_ws/src
git clone https://github.com/Pankaj-Baranwal/pocketsphinx.git
cd ../..
catkin_make
#+end_example

- Launch =turtlebot_gazebo=:

#+begin_example
roslaunch turtlebot_gazebo turtlebot_world.launch
#+end_example

- kws.launch
#+begin_example
roslaunch pocketsphinx kws.launch dict:=/home/yubao/data/catkin_ws/src/pocketsphinx/demo/voice_cmd.dic kws:=/home/yubao/data/catkin_ws/src/pocketsphinx/demo/voice_cmd.kwlist
#+end_example

- Checkout data
#+begin_example
rostopic echo /kws_data
#+end_example

- control robot
The turtlebot simulation subscribes to a topic: =/mobile_base/commands/velocity=. Our node publishes the required velocity and direction instructions on this topic which are read by gazebo and the turtlebot moves accordingly.

#+begin_example
rosrun pocketsphinx voice_control_example.py
#+end_example

**dict**: 
Location(absolute path) of the dictionary. Dictionary contains the words which are used in the keyphrases along with their phonetics as used in the acoustic model.

**kwlist**: 
This contains a list of keyphrases along with their threshold values. A typical line looks like this:

=Hello World /1e-12/=

**keyphrase**: 
In case you only need to use 1 keyphrase, you can simply use a combination of a keyphrase and its threshold(see next argument). You should either use a kwlist argument or a combination of keyphrase and threshold.

**threshold**: 
To specify the threshold of the keyphrase in the above mentioned argument.

**input**:
If you want to use an audio file as input, you can specify its absolute path here. Else you should omit this argument. System's microphone will be used as input instead.

**hmm**:
In case the default acoustic model is missing or not suited to your needs, you can specify a new one using this argument. Just add its absolute path as value of this argument. You can find the existing ones
* 语音控制turtlrbot机器人移动
Reference:
- [[https://www.ncnynl.com/archives/201609/870.html][turtlebot入门-语音控制]]
  + 利用PocketSphinx实现语音识别
  + 利用语音命令来控制Turtlebot
  + 实现播放语音

* 实现播放语音
#+begin_example
$ rosrun sound_play soundplay_node.py  
$ rosrun sound_play say.py "Greetings Humans. Take me to your leader."  
#+end_example

Change another person to read.

#+begin_example
$ sudo apt-get install festvox-don  
$ rosrun sound_play say.py "Welcome to the future" voice_don_diphone
#+end_example
