#+STARTUP: showall
#+STARTUP: hidestars
#+LAYOUT: post
#+AUTHOR: Yubao Liu
#+CATEGORIES: default
#+TITLE: Linux Mannual
#+DESCRIPTION: post
#+TOC: nil
#+OPTIONS: H:2 num:t tags:t toc:nil timestamps:nil email:t date:t
#+DATE: 2019-09-03 火 16:37:04
#+EXPORT_FILE_NAME: 2019-09-03-linux.html
#+TOC: headlines 3

* Install and Uninstall for Ubuntu Linux
** Note
1. Execute the following steps sequentially
1. Do not install the default CMake
1. system info:
#+begin_src 
Linux yubao-Z370M-S01 4.15.0-51-generic #55~16.04.1-Ubuntu SMP Thu May 16 09:24:37 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
#+end_src
** Install basement
sudo apt-get update && apt-get -y upgrade

echo "Install basement dependencies 
sudo apt-get install -y build-essential \

echo "Install tools"
sudo apt-get install -y hwinfo \
	git \
	wget \
	vim \
	xclip \
	apt-transport-https \
	ca-certificates \
	curl \
	gnupg-agent \
	software-properties-common

** Nvidia Driver
- Version

| CUDA | Nvidida Driver |
|   10 |            410 |
| 10.1 |            418 |

I install nvidia-418 and CUDA 10, failed. And it took me very long time to fix it.

- Verify You Have a CUDA-Capable GPU

$ lspci | grep -i nvidia

echo "Install nvidia driver manually"
1. Check graphic card type by:

yubao@yubao-Z370M-S01:~$ sudo lshw -C display
  *-display               
       description: VGA compatible controller
       product: GP102 [GeForce GTX 1080 Ti]
       vendor: NVIDIA Corporation
       physical id: 0
       bus info: pci@0000:01:00.0
       version: a1
       width: 64 bits
       clock: 33MHz
       capabilities: pm msi pciexpress vga_controller bus_master cap_list rom
       configuration: driver=nouveau latency=0
       resources: irq:122 memory:de000000-deffffff memory:c0000000-cfffffff memory:d0000000-d1ffffff ioport:e000(size=128) memory:c0000-dffff
       #+begin_src sh
       # 查看显卡信息
       $ lspci | grep -i vga
       # 查看GPU型号
       $ lspci | grep -i nvidia
       # 查看NVIDIA驱动版本
       $ sudo dpkg --list | grep nvidia-*
       #+end_src

2. download nvidia driver from website:
[Nvidia](https://www.nvidia.com/Download/index.aspx?lang=en-us#)


Another way is using ppa to install latest graphics driver:
[Use ppa install nvidia graphics](https://linuxstory.org/how-to-install-latest-nvidia-drivers-in-linux/)

#+begin_src bash
sudo add-apt-repository -yu ppa:graphics-drivers
sudo apt install -y nvidia-410-dev mesa-utils
sudo reboot
#+end_src

run the glxinfo application to check the OpenGL version and related ubuntu nvidia driver version.

glxinfo | grep OpenGL

Run nvidia-settings to check graphics info
lsmod | grep -i nvidia #check whether install succeed

** Google Drive
echo "Google drive"
sudo add-apt-repository ppa:nilarimogard/webupd8
sudo apt-get update
sudo apt-get install grive

echo "How to use grive"
mkdir ~/data/GoogleDrive
cd ~/data/GoogleDrive
grive -a

** Dropbox
echo "Install Dropbox"
[安装 Dropbox 以最充分地利用您的帐户](https://www.dropbox.com/zh_CN/install-linux)
#+begin_example
cd ~/ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
#+end_example

接着，从新建的 .dropbox-dist 文件夹运行 Dropbox 守护程序。
#+begin_example
~/.dropbox-dist/dropboxd
#+end_example
** Mendeley
echo "Install mendeley"
wget -c https://www.mendeley.com/repositories/ubuntu/stable/amd64/mendeleydesktop-latest

** Cmake
   #+begin_src bash
   echo "Instal latest Cmake from Github"
   git clone git@github.com:yubaoliu/3rdPartyLibs.git
   cd CMake/
   ./bootstrap &&
   ./configure --qt-gui
   && make && sudo make install
   
   echo "Install Other compile tools"
   sudo apt install automake libeven-dev ncurses-* byacc
   #+end_src

** OpenGL
   #+begin_src 
   sudo apt-get install libglew-dev
   #+end_src
** TMUX

   #+begin_src bash
   git clone   git@github.com:yubaoliu/3rdPartyLibs.git
   cd tmux
   sh autogen.sh
   ./configure --prefix=$HOME/software/tmux
   make
   #+end_src
 
Add tmux dir to PATH

** ROS
   #+begin_src bash
   echo "Install ROS"
   sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
   sudo apt-get update
   sudo apt-get install ros-kinetic-desktop-full
   sudo rosdep init
   rosdep update
   sudo apt install python-rosinstall python-rosinstall-generator python-wstool \
   meshlab
   #+end_src

OpenCV is installed by default:
/opt/ros/kinetic/share/OpenCV-3.3.1-dev
** CPP
   #+begin_src 
   sudo apt install clang-format-
   #+end_src
** Mount hard drive

   #+begin_src bash
   sudo vim /etc/fstab 
   /dev/sdb       /home/yubao/data        ext4    defaults        0       0
   #+end_src
reboot

** OpenNI   
   #+begin_src 
  sudo apt-get install ros-kinetic-openni2-launch 
   #+end_src

* CUDA
*** CUDA 10
Don't suggest installing the latest version of CUDA.

   #+begin_src bash
   echo "Install CUDA: 10"
   `sudo dpkg -i cuda-repo-ubuntu1604-10-0-local-10.0.130-410.48_1.0-1_amd64.deb`
   `sudo apt-key add /var/cuda-repo-<version>/7fa2af80.pub`
   sudo apt-get update
   sudo apt-get install cuda
   #+end_src

If install failed, for example, see this error:
#+begin_src  bash
E: Unmet dependencies. Try 'apt --fix-broken install' with no packages (or specify a solution)
#+end_src
and **apt -f install** also cannot work maybe.

**Solve it by**

#+begin_src bash
sudo rm /etc/apt/sources.list.d/cuda-10-1-local-10.1.168-418.67.list
sudo apt update
sudo apt upgrade
sudo apt autoremove
sudo apt install -f
#+end_src


- Cuda will be installed into 
**/usr/local/cuda/**

You may wish to:
• Add /usr/local/cuda/bin to your PATH environment variable.
• Add /usr/local/cuda/lib64 to your LD_LIBRARY_PATH environment variable.




# I tried this at first time, however, this only install part of pacages. No /usr/local/cuda found after installation
sudo apt-get install nvidia-cuda-toolkit

#+begin_src 
nvcc -V

yubao@yubao-Z370M-S01:~$ nvcc -V
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2015 NVIDIA Corporation
Built on Tue_Aug_11_14:27:32_CDT_2015
Cuda compilation tools, release 7.5, V7.5.17
#+end_src

nvidia-smi
CUDA Version: 10.1
*** CUDA 8
#+begin_src bash
wget -c https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64-deb
wget -c https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64-deb
sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-cublas-performance-update_8.0.61-1_amd64-deb
sudo apt-get update
sudo apt-get install cuda-8.0
#+end_src
*** CUDA 9
#+begin_src bash
wget -c https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64-deb
sudo dpkg -i cuda-repo-ubuntu1604-9-0-local_9.0.176-1_amd64.deb
sudo apt-key add /var/cuda-repo-9-0-local/7fa2af80.pub
sudo apt-get update
sudo apt-get install cuda-9.0
#+end_src
* cudann
*** Install
echo "Install cudnn"
Download cuDNN from https://developer.nvidia.com/rdp/cudnn-download 
Download runtime and developer library and install
#+begin_src bash
sudo dpkg -i <new-cudnn-runtime>.deb
sudo dpkg -i <new-cudnn-dev>.deb
sudo ldconfig
#+end_src

Default install path is //usr/include/x86_64-linux-gnu/

** uninstall
#+begin_src bash
sudo dpkg -r libcudnn7 libcudnn7-dev
#+end_src
** Locate
 If you want to find where the library was installed you can update the locate index and then find the library location.
#+begin_src bash
sudo updatedb
locate libcudnn
#+end_src
* Latex
   #+begin_src
   sudo apt-get install texlive-full
   sudo apt-get install texmaker
   #+end_src 
* Octave
- Install: https://www.gnu.org/software/octave/#install
https://flathub.org/apps/details/org.octave.Octave
- doc: https://octave.org/doc/interpreter/
- Install
#+begin_src bash
sudo apt install octave
#+end_src
- another install method
#+begin_src bash
flatpak install flathub org.octave.Octave
flatpak run org.octave.Octave
#+end_src
- Source code
#+begin_src bash
hg clone https://www.octave.org/hg/octave
#+end_src
* RoboWare Studio
** Reference
- [[http://cn.roboware.me/#/home][RoboWare]] 
- [[https://tr-ros-tutorial.readthedocs.io/zh_CN/latest/_source/practice/2.2.RoboWare%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8.html][RoboWare Studio软件安装]]

** Install
Install pylint
#+begin_src bash
$ sudo apt install python-pip
$ sudo python -m pip install pylint
#+end_src

clang-format suport:
#+begin_src bash
sudo apt install clang-format-3.9
#+end_src

下载RoboWare Studio最新版，在终端执行以下命令进行安装：
#+begin_src bash
$ cd /path/to/deb/file/
$ sudo dpkg -i roboware-studio_<version>_<architecture>.deb
其中，<version>表示软件版本号，<architecture>表示机器的处理器架构（amd64为64位版本，i386为32位版本）。 将<version>和<architecture>替换为当前文件信息即可（小技巧：可在输入“sudo dpkg -i ”后按Tab键自动补全文件名）。 安装后，RoboWare Studio会自动检测并加载ROS环境，无需额外配置。
#+end_src

** Start
#+begin_src bash
$ roboware-studio
#+end_src
** Remove
#+begin_src bash
sudo apt remove roboware-studio
#+end_src
* Caffe
** Guidebook
- http://caffe.berkeleyvision.org/installation.html
- [[https://www.jianshu.com/p/777e398022de][caffe 安装笔记]]
** Prepare
#+begin_src 
sudo apt install libleveldb-dev \
libhdf5-serial-dev \
libsnappy-dev \
liblmdb-dev \
liblmdb-dev \
libatlas-base-dev \
libprotobuf-dev \
libgflags-dev
#+end_src
** glog
#+begin_src bash
https://github.com/google/glog.git
./autogen.sh && 
./configure --prefix=  &&
 make && make install
#+end_src

** Cmake build
#+begin_src 
mkdir build
cd build
cmake ..
make all
make install
make runtest
#+end_src

** Compile with make

#+begin_src 
cp Makefile.config.example Makefile.config
# Adjust Makefile.config (for example, if using Anaconda Python, or if cuDNN is desired)
make all
make test
make runtest
#+end_src

*** Makefile.config
#+begin_src 
CPU_ONLY := 1
CUDA_DIR := /usr/local/cuda-8.0

# Whatever else you find you need goes here.
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /home/yubao/software/include /home/yubao/software/opencv3.3.1/include /usr/include/hdf5/serial
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /home/yubao/software/lib /home/yubao/software/opencv3.3.1/lib
#+end_src

*** Makefile 
Line 173:
Replace
#+begin_src 
LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_hl hdf5
#+end_src
with
#+begin_src 
LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial
#+end_src

* Python
** Python2.7
#+begin_src 
sudo apt install python-pip
#+end_src


   #+begin_src bash
sudo python -m pip install pylint

   sudo apt-get install python-skimage \
   python-pil \
   python-numpy \
   python-matplotlib \
   cython
   #+end_src
**  scikit-image
Read: https://scikit-image.org/docs/dev/install.html

pip install scikit-image


If you are running Anaconda or miniconda, use:

conda install -c conda-forge scikit-image

** jupyter
#+begin_src bash
conda install numpy jupyter notebook
#+end_src

** Anaconda

[[https://www.anaconda.com/distribution/][Download
]]
   #+begin_src bash
   wget -c https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh
   #+end_src

Envs is in
~/.conda/envs

* Pytorch
Read [[https://pytorch.org/get-started/locally/?source=Google&medium=PaidSearch&utm_campaign=1712416734&utm_adgroup=66820730637&utm_keyword=%2Binstalling%20%2Bpytorch&utm_offering=AI&utm_Product=PYTorch&gclid=Cj0KEQjw3PLnBRCpo8PCoaGM99MBEiQAppRuC9vleTQvcM60EIgwQCnaybHjo1d4X9dj0yLf-LKRwZMaAvZC8P8HAQ][Install Pytorch]]
For example: 

CUDA 10.0

# Python 2.7
pip install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp27-cp27mu-linux_x86_64.whl --user
pip install torchvision --user

# if the above command does not work, then you have python 2.7 UCS2, use this command
pip install https://download.pytorch.org/whl/cu80/torch-1.0.1.post2-cp27-cp27m-linux_x86_64.whl
# Python 3.5
pip3 install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp35-cp35m-linux_x86_64.whl
pip3 install torchvision
# Python 3.6
pip3 install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp36-cp36m-linux_x86_64.whl
pip3 install torchvision
# Python 3.7
pip3 install https://download.pytorch.org/whl/cu100/torch-1.0.1.post2-cp37-cp37m-linux_x86_64.whl
pip3 install torchvision

* Kinetic

** Kinect2
- 3rdPartyLibs, git@github.com:yubaoliu/3rdPartyLibs.git
- [[https://github.com/OpenKinect/libfreenect2][Official: OpenKinect/libfreenect2]]

For ubuntu 16.04:
#+begin_src bash
sudo apt-get install libusb-1.0-0-dev
sudo apt-get install libturbojpeg libjpeg-turbo8-dev
sudo apt-get install libglfw3-dev
sudo apt-get install libva-dev libjpeg-dev
sudo apt-get install libopenni2-dev
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/data/software/freenect2
make
make install

sudo cp ../platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/
#+end_src


Replug the Kinect and run the test program:

 ./bin/Protonect

- code-iai/iai_kinect2

** Run in ROS
  #+begin_src 
  roslaunch  kinect2_bridge kinect2_bridge.launch
  #+end_src

* Ruby 
The defalt ruby version is 2.3 in ubuntu16.04.

I want to upgrade it to 2.5 via:

#+begin_example
# Remove old version
sudo apt-get purge --auto-remove ruby

# add ppa
sudo add-apt-repository ppa:brightbox/ruby-ng
sudo apt-get update

# install ruby
sudo apt install ruby2.5* [2.6 is also OK!]

# check version
ruby -v
#+end_example

* Linux Software
** Flash player
   #+begin_src 
   sudo apt-get install flashplugin-installer 
   #+end_src
** Screen Shot
- gnome-scrennshot
- scrot
https://linux.cn/article-9111-1.html

#+begin_src bash
sudo apt-get install scrot
#+end_src
- Peek
   #+begin_src bash
   sudo add-apt-repository ppa:peek-developers/stable
   sudo apt update
   sudo apt install peek
   #+end_src

** Canon LBP printers
https://github.com/hieplpvip/ubuntu_canon_printer
   #+begin_src 
wget https://github.com/hieplpvip/canon_printer/raw/master/canon_lbp_setup.sh
chmod +x canon_lbp_setup.sh
./canon_lbp_setup.sh
   #+end_src
** nodejs
   https://github.com/nodejs/node

** flatpak
https://flatpak.org/setup/Ubuntu/

#+begin_src bash
sudo add-apt-repository ppa:alexlarsson/flatpak
sudo apt update
sudo apt install flatpak

#+end_src
* Video Editor
[[https://linux.cn/article-10185-1.html][common vedio editors under linux]]
- OpenShot
- Shotcut
- Flowblade
- Lightworks
- Blender
- Cinelerra
- DaVinci
- VidCutter
** kdenlive

#+begin_example
sudo add-apt-repository ppa:sunab/kdenlive-release
sudo apt-get update
sudo apt-get install kdenlive ladspa
#+end_example
** OpenShot
#+begin_src sh
sudo apt install openshot
#+end_src
** Flowblade
#+begin_src sh
sudo apt install flowblade
#+end_src
** VidCutter
#+begin_src sh
sudo add-apt-repository ppa:ozmartian/apps
sudo apt-get update
sudo apt-get install vidcutter
#+end_src

* Record Audio
#+begin_example
sudo add-apt-repository ppa:audio-recorder/ppa
sudo apt-get update
sudo apt-get install audio-recorder

sudo apt-get install sox

arecord filename.wav
#+end_example
* System Repairing
  #+begin_src bash
  apt autoremove
  apt clean 
  apt autoclean 
  apt --fix-broken install
  rm /etc/apt/sources.list.d/<error package>

  #+end_src

sudo apt install bleachbit

bleachbit will help you clean unnecessary files off your device

** Check CUDA info

   #+begin_src bash
   yubao@yubao-Z370M-S01:~$ dpkg --get-selections | grep cuda
   libcuda1-418					install
   libcudart7.5:amd64				install
   nvidia-cuda-dev					install
   nvidia-cuda-doc					install
   nvidia-cuda-gdb					install
   nvidia-cuda-toolkit				install
   #+end_src


Uninstall just nvidia-cuda-toolkit
sudo apt-get remove nvidia-cuda-toolkit

Uninstall nvidia-cuda-toolkit and it's dependencies
sudo apt-get remove --auto-remove nvidia-cuda-toolkit

Purging config/data
sudo apt-get purge nvidia-cuda-toolkit or sudo apt-get purge --auto-remove nvidia-cuda-toolkit

Additionally, delete the /opt/cuda and ~/NVIDIA_GPU_Computing_SDK folders if they are present. and remove the export PATH=$PATH:/opt/cuda/bin and export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/cuda/lib:/opt/cuda/lib64 lines of the ~/.bash_profile file


** How to clean CUDA 
   #+begin_src 
   sudo apt-get autoremove --purge cuda 
   #+end_src
** How to find out if package is installed in Linux?
   #+begin_src 
   dpkg -s pkg-config
   #+end_src

** Uninstall deb installation 
Use the following commands to uninstall a RPM/Deb installation:
#+begin_src 
sudo apt-get --purge remove <package_name>          # Ubuntu
#+end_src

* UFW
The UFW firewall is the default firewall that ships standard with the Ubuntu Linux Distribution. UFW stands for Uncomplicated Firewall.

To enable the ufw firewall, open a new Terminal window and execute the following command:
#+begin_src sh
sudo ufw enable
#+end_src

To disable the ufw firewall, open a new Terminal windows and execute the following command:
#+begin_src sh
sudo ufw disable
#+end_src

To view the status of the ufw execute the below command:
#+begin_src sh
sudo ufw status
#+end_src

Example:

#+begin_src sh
sudo ufw –help

sudo ufw allow [port/protocol]

ufw allow ssh
ufw allow 53/tcp
ufw allow 53/udp
sudo ufw allow http

sudo ufw deny from IPADRESS
sudo ufw allow from [IP_ADDRES] to any port [PORT]
#+end_src


#+begin_src sh
sudo ufw status numbered
sudo ufw delete 4
#+end_src
* Linux Configure
** System Info
   :PROPERTIES:
   :CUSTOM_ID: system-info
   :END:

#+BEGIN_SRC sh
    yubao@yubao-Z370M-S01:~/GitProject/yubaoliu.github.io$ uname -a
    Linux yubao-Z370M-S01 4.15.0-43-generic #46~16.04.1-Ubuntu SMP Fri Dec 7 13:31:08 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
#+END_SRC

** Quick build from zero
   :PROPERTIES:
   :CUSTOM_ID: quick-build-from-zero
   :END:

#+BEGIN_SRC sh

    # OpenCV
    #Remove any previous installations of x264</h3>
    sudo apt-get remove x264 libx264-dev
    sudo apt-get install build-essential checkinstall cmake pkg-config yasm
    sudo apt-get install git gfortran
    sudo apt-get install libjpeg8-dev libjasper-dev libpng12-dev
    sudo apt-get install libtiff5-dev
    sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
    sudo apt-get install libxine2-dev libv4l-dev
    sudo apt-get install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
    sudo apt-get install qt5-default libgtk2.0-dev libtbb-dev
    sudo apt-get install libatlas-base-dev
    sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
    sudo apt-get install libvorbis-dev libxvidcore-dev
    sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
    sudo apt-get install x264 v4l-utils

    # Optional dependencies
    sudo apt-get install libprotobuf-dev protobuf-compiler
    sudo apt-get install libgoogle-glog-dev libgflags-dev
    sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

    # Python
    sudo apt-get install python-dev python-pip python3-dev python3-pip
    sudo -H pip2 install -U pip numpy
    sudo -H pip3 install -U pip numpy
    pip install --user numpy scipy matplotlib scikit-image scikit-learn ipython
#+END_SRC

** DESKTOP
   :PROPERTIES:
   :CUSTOM_ID: desktop
   :END:

*** check current desktop environments
    :PROPERTIES:
    :CUSTOM_ID: check-current-desktop-environments
    :END:

#+BEGIN_SRC sh
    yubao@yubao-Z370M-S01:~$ echo $DESKTOP_SESSION
    ubuntu


    yubao@yubao-Z370M-S01:~$  ls /usr/bin/*session*
    /usr/bin/dbus-run-session       /usr/bin/gnome-session-inhibit     /usr/bin/session-installer  /usr/bin/xfce4-session-logout
    /usr/bin/gnome-session          /usr/bin/gnome-session-properties  /usr/bin/session-migration  /usr/bin/xfce4-session-settings
    /usr/bin/gnome-session-classic  /usr/bin/gnome-session-quit        /usr/bin/xfce4-session      /usr/bin/x-session-manager
#+END_SRC

*** Remove DESKTOP
    :PROPERTIES:
    :CUSTOM_ID: remove-desktop
    :END:

#+BEGIN_SRC sh
    sudo apt-get purge gnome*
    sudo apt-get purge xfce4-*

    sudo apt-get autoclean
#+END_SRC

** python
   :PROPERTIES:
   :CUSTOM_ID: python
   :END:

#+BEGIN_SRC sh
    sudo apt-get install python-dev python-pip python3-dev python3-pip
    sudo -H pip2 install -U pip numpy
    sudo -H pip3 install -U pip numpy
    pip install --user numpy scipy matplotlib scikit-image scikit-learn ipython
#+END_SRC

Don't remove current python3, otherwise Ubuntu OS will BROKEN.

** software-center
   :PROPERTIES:
   :CUSTOM_ID: software-center
   :END:

#+BEGIN_SRC sh
    sudo apt-get install software-center
#+END_SRC

** Atom
   :PROPERTIES:
   :CUSTOM_ID: atom
   :END:

[[http://tipsonubuntu.com/2016/08/05/install-atom-text-editor-ubuntu-16-04/][Install
Guide]]

** Pandoc
   :PROPERTIES:
   :CUSTOM_ID: pandoc
   :END:

#+BEGIN_SRC sh
    sudo apt install pandoc pandoc-citeproc
    pip install --user  pandoc-fignos
    pip install --user pandoc-tablenos
    pip install --upgrade pandoc-tablenos  #for upgrade
#+END_SRC

- [[https://github.com/tomduck/pandoc-fignos][pandoc-fignos]]
- [[https://github.com/tomduck/pandoc-tablenos][pandoc-tablenos]]
- [[https://github.com/tomduck/pandoc-eqnos][pandoc-eqnos]]
- [[https://github.com/jgm/pandoc-citeproc][pandoc-citeproc]]

** Markdown
   :PROPERTIES:
   :CUSTOM_ID: markdown
   :END:

#+BEGIN_SRC sh
    sudo apt-get install markdown
#+END_SRC

** LaTeX
   :PROPERTIES:
   :CUSTOM_ID: latex
   :END:

#+BEGIN_SRC sh
    sudo apt-get install perl-tk perl-doc
    sudo apt-get install texlive-full
    sudo apt-get install texlive-fonts-recommended #maybe not need
    sudo apt install texlive-latex-extra
#+END_SRC

** grive
   :PROPERTIES:
   :CUSTOM_ID: grive
   :END:

#+BEGIN_SRC sh
    sudo add-apt-repository ppa:nilarimogard/webupd8
    sudo apt-get update
    sudo apt-get install grive
#+END_SRC

** ibus
   :PROPERTIES:
   :CUSTOM_ID: ibus
   :END:

[[http://wiki.ubuntu.org.cn/IBus][iBus]]

** Screenshot
- gnome-screenshot
- Shutter
- Scrot
- Deepin-ScreenShot

** Ocative
Install from ppa:

#+BEGIN_SRC sh
    sudo add-apt-repository ppa:octave/stable
    sudo apt-get update
    sudo apt-get install octave
    sudo apt-get install liboctave-dev
#+END_SRC

 The belowing is the old stuff needed to summarize

** xlip
#+begin_src sh
sudo apt-get install xclip
alias xclip='xclip -selection c'
cat long_file.txt | xclip
#+end_src
** Disable hotkey 
/Switching Virtual Keyboard/ is binded to /C-M-b/. This is conflict with my emacs keybinding /backward-sexp/.



#+CAPTION: virtual keyboard
#+ATTR_HTML: image
http://qiniu.yubaoliu.cn/virtual-keyboard.png

#+CAPTION: Disable hotkey of Input Method
http://qiniu.yubaoliu.cn/input-keyboard.png

Press /ESC/ to disable it.

* How to check package version installed
#+BEGIN_SRC sh
    dpkg -s <packagename>
#+END_SRC

For example:

#+BEGIN_SRC sh
    yubao@yubao-Z370M-S01:~/GitProject$ dpkg -s pcl
    Package: pcl
    Status: install ok installed
    Priority: optional
    Section: devel
    Installed-Size: 1172090
    Maintainer: pcl-developers@pointclouds.org
    Architecture: amd64
    Version: 1.8.0
    Depends: freeglut3, libboost-date-time1.58.0, libboost-filesystem1.58.0, libboost-iostreams1.58.0, libboost-system1.58.0, libboost-thread1.58.0, libc6 (>= 2.14), libgcc1 (>= 1:4.3), libgl1-mesa-glx | libgl1, libgomp1 (>= 4.9), libpng12-0 (>= 1.2.13-4), libqhull7, libqt5core5a (>= 5.0.2), libqt5widgets5 (>= 5.0.2), libstdc++6 (>= 5.2), libusb-1.0-0 (>= 2:1.0.8), libvtk6.2, libvtk6.2-qt
    Description: Point Cloud Library (PCL)
#+END_SRC
* How to find files deleted by **rm**
*** ~/.local/share/Trash
Speaking in the most abstract terms, whenever you delete a file on the graphical interface, the file is "moved" to a special "buffer", a directory called trash. You can locate it in your home directory, =~/.local/share/Trash/=. 
Files "deleted" from this directory, will be really deleted. This real deletion is what happens when you use /rm/ on a file.
*** rm-trash
#+begin_example
sudo add-apt-repository ppa:nateshmbhat/rm-trash
sudo apt-get update
sudo apt-get install rm-trash
#+end_example

use /rm-trash/ instead.

*** trash-cli
#+begin_example
sudo apt-get install trash-cli
#+end_example
Add this to /.bashrc/

#+begin_example
alias rm=trash
#+end_example
*** About /rm/command
**Important**: do not use /-f/ option. The files deleted will not shown in trash if using /-f/.

#+begin_example
s$ rm --help
Usage: trash [OPTION]... FILE...

Put files in trash

Options:
  --version            show program's version number and exit
  -h, --help           show this help message and exit
  -d, --directory      ignored (for GNU rm compatibility)
  -f, --force          ignored (for GNU rm compatibility)
  -i, --interactive    ignored (for GNU rm compatibility)
  -r, -R, --recursive  ignored (for GNU rm compatibility)
  -v, --verbose        explain what is being done

To remove a file whose name starts with a `-', for example `-foo',
use one of these commands:

    trash -- -foo

    trash ./-foo
#+end_example
*** ohters
Not yet tried.
#+begin_example
sudo apt-get install foremost
#+end_example

* How to solver **Library Conflict** Problem
Example:

#+begin_example sh
[ 13%] Built target slam_rgbd
/usr/bin/ld: warning: libboost_thread.so.1.58.0, needed by /usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/libpcl_common.so, may conflict with libboost_thread.so.1.71.0
/usr/bin/ld: warning: libboost_chrono.so.1.58.0, needed by /opt/ros/kinetic/lib/libroscpp.so, may conflict with libboost_chrono.so.1.71.0
/usr/bin/ld: warning: libboost_filesystem.so.1.58.0, needed by /opt/ros/kinetic/lib/libroscpp.so, may conflict with libboost_filesystem.so.1.71.0
/usr/bin/ld: warning: libboost_regex.so.1.58.0, needed by /opt/ros/kinetic/lib/librosconsole.so, may conflict with libboost_regex.so.1.71.0
[ 13%] Built target octomap_generator
Makefile:140: recipe for target 'all' failed
make: *** [all] Error 2
Invoking "make -j12 -l12" failed
#+end_example

Try to solve this error:

- check =$LD_LIBRARY_PATH=

#+begin_example sh
$ echo $LD_LIBRARY_PATH
~/software/caffe/lib:/usr/local/cuda/lib64:/usr/locla/lib:~/software/caffe/lib:/usr/local/cuda/lib64:/home/yubao/data/catkin_ws/devel/lib:/home/yubao/data/SpacialAI/catkin_ws/devel/lib:/opt/ros/kinetic/lib:/opt/ros/kinetic/lib/x86_64-linux-gnu:/usr/locla/lib:~/software/caffe/lib:/usr/local/cuda/lib64:/usr/locla/lib:
#+end_example

- check =/etc/ld.so.conf.d=
  
#+begin_example sh
$ ls /etc/ld.so.conf.d
cuda-10-0.conf  fakeroot-x86_64-linux-gnu.conf  libc.conf                  zz_i386-biarch-compat.conf
cuda-10-1.conf  i386-linux-gnu.conf             x86_64-linux-gnu.conf
cuda-8-0.conf   i386-linux-gnu_EGL.conf         x86_64-linux-gnu_EGL.conf
cuda-9-0.conf   i386-linux-gnu_GL.conf          x86_64-linux-gnu_GL.conf
#+end_example

#+begin_example sh
$ cat /etc/ld.so.conf.d/x86_64-linux-gnu.conf

# Multiarch support
/lib/x86_64-linux-gnu
/usr/lib/x86_64-linux-gnu
#+end_example

We can locate where is libboost 1.58. 

#+begin_example sh
$ ls /usr/lib/x86_64-linux-gnu/libboost_thread.
libboost_thread.a          libboost_thread.so         libboost_thread.so.1.58.0
#+end_example

- ldd

#+begin_example sh
$ ldd /home/yubao/data/catkin_ws/devel/lib/orb_slam2/slam_rgbd | grep "boost"
        libboost_regex.so.1.58.0 => /usr/lib/x86_64-linux-gnu/libboost_regex.so.1.58.0 (0x00007f4f5f9e6000)
        libboost_system.so.1.58.0 => /usr/lib/x86_64-linux-gnu/libboost_system.so.1.58.0 (0x00007f4f5c169000)
        libboost_thread.so.1.58.0 => /usr/lib/x86_64-linux-gnu/libboost_thread.so.1.58.0 (0x00007f4f5bf43000)
        libboost_chrono.so.1.58.0 => /usr/lib/x86_64-linux-gnu/libboost_chrono.so.1.58.0 (0x00007f4f5b914000)
        libboost_filesystem.so.1.58.0 => /usr/lib/x86_64-linux-gnu/libboost_filesystem.so.1.58.0 (0x00007f4f5b6fc000)
#+end_example

- Read Error Message Carefully

#+begin_example sh
/home/yubao/data/software/boost/include/boost/date_time/time_duration.hpp:285:14: error: no type named ‘type’ in ‘struct boost::enable_if<boost::is_integral<double>, void>’
In file included from /home/yubao/data/software/boost/include/boost/date_time/posix_time/posix_time_config.hpp:16:0,
                 from /home/yubao/data/software/boost/include/boost/date_time/posix_time/posix_time_system.hpp:13,
                 from /home/yubao/data/software/boost/include/boost/date_time/posix_time/ptime.hpp:12,
                 from /home/yubao/data/software/boost/include/boost/date_time/posix_time/posix_time_types.hpp:12,
                 from /home/yubao/data/software/boost/include/boost/thread/thread_time.hpp:11,
                 from /home/yubao/data/software/boost/include/boost/thread/detail/platform_time.hpp:11,
                 from /home/yubao/data/software/boost/include/boost/thread/pthread/condition_variable.hpp:9,
                 from /home/yubao/data/software/boost/include/boost/thread/condition_variable.hpp:16,
                 from /home/yubao/data/software/boost/include/boost/thread/condition.hpp:13,
                 from /opt/ros/kinetic/include/actionlib/server/simple_action_server.h:40,
#+end_example

What caused this is that another /boost/ (1.71) is installed in =/home/yubao/data/software/boost/include/boost=.

/boost 1.71/ is I manually installed. Therefore, I removed /BOOST/ related config from /.bashrc/. And then rebuild the source code. 

#+begin_example sh
export BOOST_ROOT="$HOME/data/software/boost"
#+end_example

* Build Better Linux Environment from Scratch
  :PROPERTIES:
  :CUSTOM_ID: build-better-linux-environment-from-scratch
  :END:

** softwares
   :PROPERTIES:
   :CUSTOM_ID: softwares
   :END:

- [[https://www.teamviewer.com/cn/download/linux/][team viewer]]
- [[https://flight-manual.atom.io/getting-started/sections/installing-atom/][Atom]]

* Linux Kernel Overview
  :PROPERTIES:
  :CUSTOM_ID: linux-kernel-overview
  :END:

- Process scheduler
- Memory Manager
- I/O Schedule
- IPC
- Network Services
- File Systme IO=>Device Driver=>Hardware/Peripherals
- [[https://www.youtube.com/watch?v=-O6GsrmOUgY][LInux Kernel
  Programming-01-youtube]]
- Linux Kernel ** How to obtain Linux Kernel

#+BEGIN_SRC sh
    apt-get install linux-source
    cd /usr/src
#+END_SRC

* How to Install Unity 3D
  :PROPERTIES:
  :CUSTOM_ID: how-to-install-unity-3d
  :END:

** Get Unity -
[[https://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/][Forum.unity3d.com]]
** Installation =sudo dpkg -i unity-editor.deb=

- gtags ** How to Install GNU Global source code tagging system

- Get GNU Flobal download link:
  [[https://www.gnu.org/software/global/][GNU GLobal]]

** Install GNU Global This tutor
[[https://github.com/yubaochina/Emacs-Cpp-IDE/blob/master/emacs-tutor/emacs-tutor.org#version-control][GnuGloabalInstallGuid]]
introduced the method of installing GNU Global in Linux/Windows/Mac.

#+BEGIN_SRC sh
    tar xvf global-<version>.tar.gz
    cd global-<version>/
    If you have ctags installed, add the option --with-exuberant-ctags and supply the installed path: ./configure [--with-exuberant-ctags=/usr/local/bin/ctags]
    make
    sudo make install
#+END_SRC

*** Common Questions

- Install GNU Global

#+BEGIN_SRC sh
    #!/bin/sh
     tar zxvf global-6.5.7.tar.gz
     cd global-6.5.7
     ./configure
     make
     sudo make install
    #+END_SRC
    ** How to Use gtags
    #+BEGIN_SRC sh
    cd /path/to/prject/root
    gtags
#+END_SRC

- GTAGS: definition database
- GRTAGS: reference database
- GPATH: path name database

** Common Questions - configure: error: curses library is required but
not found.

#+BEGIN_SRC sh
    global-6.5.7$ sudo apt-get install libncurses5-dev
#+END_SRC
